<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cafe24.seoje1004.returns.repository.ReturnsMapper">
	
	<!-- returns객체등록 -->
	<resultMap type="com.cafe24.seoje1004.returns.model.Returns" id="returnsListMap">
		<id property="returnCode" column="return_code"/>
		<result property="returnReason" column="return_reason"/>
		<result property="returnPrice" column="return_price"/>
		<result property="returnReportDate" column="return_report_date"/>
		<result property="returnHeadCheck" column="return_head_check"/>
		<result property="returnHeadCheckDate" column="return_head_check_date"/>
		<result property="totalAccountGroup" column="total_account_group"/>
		<result property="returnReDelivery" column="return_re_delivery"/>
		<result property="returnCancel" column="return_cancel"/>
		<result property="ordersCode" column="orders_code"/>
		<result property="specificItemCode" column="specific_item_code"/>
		<result property="headStaffId" column="head_staff_id"/>
		<result property="headReturnsConfirm" column="head_returns_confirm"/>
		<result property="subCode" column="sub_code"/>
		
	</resultMap>
	
	<!-- returnsFile객체등록 -->
	<resultMap type="com.cafe24.seoje1004.returns.model.ReturnsFile" id="returnsFileListMap">
		<id property="returnFileCode" column="return_file_code"/>
		<result property="returnCode" column="return_code"/>
		<result property="returnFile" column="return_file"/>
		<result property="fileName" column="file_name"/>
		<result property="randomName" column="random_name"/>
	</resultMap>
	
	<!-- SubStock 객체 등록 -->
	<resultMap type="com.cafe24.seoje1004.returns.model.SubStock" id="subStockListMap">
		<id property="subStockCode" column="sub_stock_code"/>
		<result property="headStockInDate" column="head_stock_in_date"/>
		<result property="subStockInDate" column="sub_stock_in_date"/>
		<result property="subStockOut" column="sub_stock_out"/>
		<result property="subStockConfirmDate" column="sub_stock_confirm_date"/>
		<result property="ordersCode" column="orders_code"/>
		<result property="subCode" column="sub_code"/>
		<result property="headItemCode" column="head_item_code"/>
		<result property="specificItemCode" column="specific_item_code"/>
		<result property="subStaffCode" column="sub_staff_code"/>
	</resultMap>
	
	
	<!-- 가맹측 반품상품관리 조회 -->
	<select id="subViewReturnsList"
			parameterType="java.util.Map"
			resultMap="returnsListMap">
		SELECT
			return_code,
			return_reason,
			return_price,
			return_report_date,
			return_head_check,
			return_head_check_date,
			total_account_group,
			return_re_delivery,
			return_cancel,
			orders_code,
			specific_item_code,
			head_staff_id,
			head_returns_confirm,
			sub_code
		FROM
			returns	
				
		<where>
			sub_code = #{subCode}
			<if test="search.regitDateStart != null and search.regitDateEnd != null and search.regitDateStart !='' and search.regitDateEnd !=''">
				AND <![CDATA[date(return_report_date) >= #{search.regitDateStart} and date(return_report_date) <= #{search.regitDateEnd}]]>  
			</if>
			<if test="search.searchKey != null and search.searchKey != '' and search.search != null and search.search != ''">
					AND  ${search.searchKey} like CONCAT('%',#{search.search},'%') 
			</if>
			
		</where>
		<if test="search.criteria == null and search.criteria == '' and search.upDown == null and search.upDown == ''">
			order by return_report_date desc
		</if>
		<if test="search.criteria != null and search.upDown != null and search.criteria != null and search.upDown != ''">
			order by ${search.criteria} ${search.upDown}
		</if>
		LIMIT 0,${search.viewMore}
				
	
	</select>
	
	<!-- 본사측 반품상품관리 조회 -->
	<select id="headViewReturnsList"
			parameterType="java.util.Map"
			resultMap="returnsListMap">
		SELECT
			return_code,
			return_reason,
			return_price,
			return_report_date,
			return_head_check,
			return_head_check_date,
			total_account_group,
			return_re_delivery,
			return_cancel,
			orders_code,
			specific_item_code,
			head_staff_id,
			head_returns_confirm,
			sub_code
		FROM
			returns			
		<where>
			
			<if test="search.regitDateStart != null and search.regitDateEnd != null and search.regitDateStart !='' and search.regitDateEnd !=''">
				<![CDATA[date(return_report_date) >= #{search.regitDateStart} and date(return_report_date) <= #{search.regitDateEnd}]]>  
			</if>
			<if test="search.searchKey != null and search.searchKey != '' and search.search != null and search.search != ''">
					AND  ${search.searchKey} like CONCAT('%',#{search.search},'%') 
			</if>
			
		</where>
		<if test="search.criteria == null and search.criteria == '' and search.upDown == null and search.upDown == ''">
			order by return_report_date desc
		</if>
		<if test="search.criteria != null and search.upDown != null and search.criteria != null and search.upDown != ''">
			order by ${search.criteria} ${search.upDown}
		</if>
		LIMIT 0,${search.viewMore}
	</select>
	
	<!-- 해당 반품상품의 상세정보 -->
	<select id="viewReturnsContent"
			parameterType="String"
			resultMap="returnsListMap">
		SELECT
			return_code,
			return_reason,
			return_price,
			return_report_date,
			return_head_check,
			return_head_check_date,
			total_account_group,
			return_re_delivery,
			return_cancel,
			orders_code,
			specific_item_code,
			head_staff_id,
			head_returns_confirm,
			sub_code
		FROM
			returns	
		WHERE
			return_code = #{returnCode}	
	
	</select>
	
	<!-- 해당반품상품의 파일 리스트 -->
	<select id="viewReturnsFile"
			parameterType="String"
			resultMap="returnsFileListMap">
		SELECT
			return_file_code,
			return_code,
			return_file,
			file_name,
			random_name
		FROM
			returns_file
		WHERE
			return_code = #{returnCode}
	</select>
	
	<!-- 출고상태가 N, 가맹이확인하고 입고한날짜 not null -->
	<select id="subAddReturnsForm"
			parameterType="java.util.Map"
			resultMap="subStockListMap">
		SELECT
			sub_stock_code,
			head_stock_in_date,
			sub_stock_in_date,
			sub_stock_out,
			orders_code,
			sub_code,
			head_item_code,
			specific_item_code,
			sub_staff_code
		FROM
			sub_stock
		 
		
			
		<where>
			sub_code	=	#{subCode} AND 	sub_stock_out	=	"N" AND  sub_stock_in_date != ""
		<if test="search.regitDateStart != null and search.regitDateEnd != null and search.regitDateStart !='' and search.regitDateEnd !=''">
			AND <![CDATA[date(head_stock_in_date) >= #{search.regitDateStart} and date(head_stock_in_date) <= #{search.regitDateEnd}]]>  
		</if>
		<if test="search.searchKey != null and search.searchKey != '' and search.search != null and search.search != ''">
				AND  ${search.searchKey} like CONCAT('%',#{search.search},'%') 
		</if>
			
		</where>
		<if test="search.criteria == null and search.criteria == '' and search.upDown == null and search.upDown == ''">
			order by head_stock_in_date desc
		</if>
		<if test="search.criteria != null and search.upDown != null and search.criteria != null and search.upDown != ''">
			order by ${search.criteria} ${search.upDown}
		</if>
		
		LIMIT 0,${search.viewMore}			
	</select>
	
	<!-- 해당재고를 기준으로 반품등록에 필요한 정보를 가져오자 -->
	<select id="subAddReturnsForm2"
			parameterType="String"
			resultType="com.cafe24.seoje1004.returns.model.AddReturns">
		SELECT
			sub_stock.sub_stock_code as subStockCode,
			head_item.h_item_selling_price as hItemSellingPrice,
			sub_orders.total_account_group as totalAccountGroup,
			sub_stock.orders_code as ordersCode,
			sub_stock.specific_item_code as specificItemCode,
			sub_stock.sub_code as subCode
				
		FROM	
			sub_stock
		INNER JOIN
			head_item 
		ON 
			sub_stock.head_item_code = head_item.h_item_code
		INNER JOIN
			sub_orders
		ON	
			sub_stock.orders_code = sub_orders.orders_code	
		WHERE
			sub_stock.sub_stock_code = #{subStockCode}
	</select>
	
	<!-- 환불 신청시 해당 재고상품의 출고여부(판매여부)를 N->Y로 변경 -->
	<update id="updateSubStockOut"
			parameterType="String">
		UPDATE
			sub_stock
		SET
			sub_stock_out	=	"Y"
		WHERE
			sub_stock_code = #{subStockCode}		
	
	</update>
	
	<!-- returns테이블에 새로운 환불 등록 -->
	<insert id="subAddReturns"
			parameterType="com.cafe24.seoje1004.returns.model.Returns">
		<selectKey resultType="hashmap" keyProperty="returnCode" order="BEFORE">
			select if(isnull(return_code),'return_code1', concat('return_code',MAX(CONVERT(SUBSTRING(return_code,12), UNSIGNED))+1))
			as returnCode
			from returns
		</selectKey>
		INSERT INTO returns
			(return_code
			,return_reason
			,return_price
			,return_report_date
			,total_account_group
			,orders_code
			,specific_item_code
			,sub_code
			,return_re_delivery
			
			)
			
			VALUES(
			#{returnCode}
			,#{returnReason}
			,#{returnPrice}
			,NOW()
			,#{totalAccountGroup}
			,#{ordersCode}
			,#{specificItemCode}
			,#{subCode}
			,#{returnReDelivery}
			)
	</insert>
	
	<!-- 랜덤네임이 중복되는 이름이 있으면 다시 새로운 랜덤네임으로 저장 -->
	<select id="selectReturnFileByRandomName"
			parameterType="String"
			resultMap="returnsFileListMap">
		SELECT
			return_code,
			file_name
		FROM
			returns_file
		WHERE
			random_name = #{randomName}		
	
	</select>
	
	<!-- 반품첨부파일 정보 등록 -->
	<insert id="subAddReturnsFile"
			parameterType="com.cafe24.seoje1004.returns.model.ReturnsFile">
		<selectKey resultType="hashmap" keyProperty="returnFileCode" order="BEFORE">
			select if(isnull(return_file_code),'return_file_code1', concat('return_file_code',MAX(CONVERT(SUBSTRING(return_file_code,17), UNSIGNED))+1))
			as returnFileCode
			from returns_file
		</selectKey>
		INSERT INTO returns_file
		(return_file_code
		,return_code
		,return_file
		,file_name
		,random_name
		)
		VALUES
		(#{returnFileCode}
		,#{returnCode}
		,#{returnFile}
		,#{fileName}
		,#{randomName}
		)	
	
	</insert>
	
	<!-- 본사에서 환불 승인 -->
	<update id="approvalReturns"
			parameterType="String">
		UPDATE
			returns
		SET
			return_head_check	=	"Y",
			return_head_check_date	=	NOW()
		WHERE
			return_code = #{returnCode}	
	</update>
	
	<!-- 해당 returnCode에 해당하는 행 삭제 -->
	<delete id="subCancelReturns">
		DELETE FROM returns
		WHERE return_code	=	#{returnCode}
		
	</delete>
	
	<!-- orders_code에 해당하는 subStock가맹재고의 subStockOut출고여부를 Y->N으로 수정 -->
	<update id="updateSubStockOutN"
			parameterType="String">
		UPDATE
			sub_stock
		SET
			sub_stock_out = "N"
		WHERE
			orders_code = #{ordersCode}	
	
	</update>
	
	<!-- 환불테이블의 headReturnsConfirm을 Y로 변경 update -->
	<update id="updateHeadReturnsConfirmY"
			parameterType="String">
		UPDATE
			returns
		SET
			head_returns_confirm = "Y"
		WHERE
			return_code = #{returnCode}
	</update>
	
	<!-- sub_orders의 기존행의 sub_orders_status = "환불" update -->
	<update id="updateSubOrdersStatus"
			parameterType="String">
		UPDATE
			sub_orders
		SET
			sub_orders_status = "환불"
		WHERE
			orders_code = #{ordersCode}
	</update>
	
	<!-- sub_orders의 기존행의 정보를 가져옴 -->
	<select id="selectSubOrdersByOrdersCode"
			parameterType="String"
			resultType="com.cafe24.seoje1004.returns.model.SubOrders">
		SELECT s.orders_code ordersCode, 
			s.sub_orders_group subOrdersGroup, 
			s.sub_orders_quantity subOrdersQuantity, 
			s.sub_orders_date subOrdersDate, 
			s.sub_orders_head_check subOrdersHeadCheck, 
			s.sub_orders_status subOrdersStatus, 
			s.total_account_group totalAccountGroup, 
			s.orders_pay ordersPay, 
			s.orders_pay_date ordersPayDate, 
			s.head_item_code headItemCode, 
			s.sub_code subCode,
			s.sub_staff_code subStaffCode, 
			s.head_staff_id headStaffId, 
			s.head_orders_confirm headOrdersConfirm, 
			s.sub_orders_price subOrdersPrice, 
			h.h_item_selling_price hItemSellingPrice
			FROM sub_orders s inner join head_item h
			on s.head_item_code = h.h_item_code
			where orders_code = #{ordersCode}
	</select>
	
	<!-- sub_orders새로운 행에 insert -->
	<insert id="addSubOrders"
	        parameterType="com.cafe24.seoje1004.returns.model.SubOrders">
		<selectKey resultType="hashmap" keyProperty="ordersCode" order="BEFORE">
			select if(isnull(orders_code),'orders_code1', concat('orders_code',MAX(CONVERT(SUBSTRING(orders_code,12), UNSIGNED))+1))
			as ordersCode
			from sub_orders
		</selectKey>
		INSERT INTO sub_orders
			(orders_code
			,sub_orders_group
			,sub_orders_quantity
			,sub_orders_date
			,sub_orders_head_check
			,sub_orders_status
			,total_account_group
			,orders_pay
			,orders_pay_date
			,head_item_code
			,sub_code
			,sub_staff_code
			,head_staff_id
			,head_orders_confirm
			sub_orders_price
			)
			
			VALUES(
			#{ordersCode}
			,#{subOrdersGroup}
			,#{subOrdersQuantity}
			,NOW()
			,NOW()
			,"배송중"
			,#{totalAccountGroup}
			,#{ordersPay}
			,#{ordersPayDate}
			,#{headItemCode}
			,#{subCode}
			,#{subStaffCode}
			,#{headStaffId}
			,#{headOrdersConfirm}
			,#{subOrdersPrice}
			
			)
	</insert>
	
	<!-- 배송테이블의 deliveryReturn을 Y로 변경 update -->
	<update id="updateDeliveryReturn"
			parameterType="String">
		UPDATE
			delivery
		SET
			delivery_return	=	"Y"
			
		WHERE
			orders_code = #{ordersCode}
	
	</update>
	
	<!-- 배송테이블의 delivery에 기존행의 정보를 가져옴 -->
	<select id="selectDeliveryByOrdersCode"
			parameterType="String"
			resultType="com.cafe24.seoje1004.returns.model.Delivery">
		SELECT
			delivery_location as deliveryLocation
			,delivery_person as deliveryPerson
			,orders_code as ordersCode
			,head_staff_id as headStaffId
			
		FROM
			delivery
		WHERE	
			orders_code = #{ordersCode}
	</select>
	
	<!-- delivery에 새로운행에 insert -->
	<insert id="addDelivery"
			parameterType="com.cafe24.seoje1004.returns.model.Delivery">
		<selectKey resultType="hashmap" keyProperty="deliveryCode" order="BEFORE">
			select if(isnull(delivery_code),'delivery_code1', concat('delivery_code',MAX(CONVERT(SUBSTRING(delivery_code,14), UNSIGNED))+1))
			as deliveryCode
			from delivery
		</selectKey>
		INSERT INTO delivery
			(delivery_code
			,delivery_date
			,delivery_receive
			,delivery_location
			,delivery_return
			,delivery_person
			,orders_code
			,head_staff_id
			)
			
			VALUES(
			#{deliveryCode}
			,NOW()
			,"N"
			,#{deliveryLocation}
			,"N"
			,#{deliveryPerson}
			,#{ordersCode}
			,#{headStaffId}
			)
	</insert>
	
	<update id="updateOrdersReturns"
			parameterType="com.cafe24.seoje1004.returns.model.SubOrders">
			UPDATE sub_orders
			SET
				sub_orders_quantity = ${subOrdersQuantity},
				sub_orders_price = ${subOrdersPrice}
			WHERE 
			orders_code = #{ordersCode}
	</update>
	
	
	
	
	
	<!-- 본사에서 환불 처리 (돈으로 지급) -->
	<insert id="headReturns"
			parameterType="java.util.Map">
			
			
			<selectKey resultType="hashmap" keyProperty="subAccountCode" order="BEFORE">
				select if(isnull(sub_account_code),'sub_account_code200', concat('sub_account_code', MAX(CONVERT(SUBSTRING(sub_account_code,17), UNSIGNED))+1)) 
				as subAccountCode
				from sub_account
		</selectKey>
			
			
			INSERT INTO sub_account
			(sub_account_code, 
			sub_account_flow, 
			total_account_group, 
			sub_account_sum,
			sub_account_request_date, 
			sub_account_detail, 
			subject_code, 
			sub_code 
			)
			
			VALUES(
			#{subAccountCode}
			,#{addSharedSubAccount.subAccountFlow}
			,#{addSharedSubAccount.totalAccountGroup}
			,#{addSharedSubAccount.subAccountSum}
			,NOW()
			,#{addSharedSubAccount.subAccountDetail}
			,#{addSharedSubAccount.subjectCode}
			,#{addSharedSubAccount.subCode}
			
			
			)
			
	</insert>
	
	
	
</mapper>